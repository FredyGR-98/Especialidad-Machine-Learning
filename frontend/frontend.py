"""
===========================================================
üìå frontend.py ‚Äî Interfaz en Streamlit
===========================================================

Este frontend consume la API Flask (api.py) y permite:
- Ver informaci√≥n general del proyecto
- Realizar predicciones (sliders y casos precargados)
- Visualizar m√©tricas y gr√°ficos del modelo

‚ö†Ô∏è IMPORTANTE:
Este proyecto es con fines EDUCATIVOS y no constituye diagn√≥stico m√©dico.
===========================================================
"""
import os
import sys
from pathlib import Path
from typing import List

import requests
import streamlit as st
import plotly.graph_objects as go
import pandas as pd

# --- Paths / Imports opcionales ---
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(BASE_DIR))

# FEATURE_TRANSLATIONS opcional
try:
    from utils.feature_names import FEATURE_TRANSLATIONS
except Exception:
    FEATURE_TRANSLATIONS = {}

# === Configuraci√≥n ===
API_URL = os.environ.get("API_URL", "http://localhost:5000").rstrip("/")
st.set_page_config(page_title="Clasificador C√°ncer de Mama", page_icon="üéÄ", layout="wide")

# === Estado global ===
if "dark_mode" not in st.session_state:
    st.session_state["dark_mode"] = False
if "active_page" not in st.session_state:
    st.session_state["active_page"] = "üè† Contexto + EDA"
if "inputs" not in st.session_state:
    st.session_state["inputs"] = {}

# === Sidebar: navegaci√≥n + modo ===
st.sidebar.markdown("## üìå Navegaci√≥n")
page = st.sidebar.radio(
    "Ir a:",
    ["üè† Contexto + EDA", "‚öôÔ∏è Modelo y Rendimiento", "üîÆ Caso Pr√°ctico"],
    index=["üè† Contexto + EDA", "‚öôÔ∏è Modelo y Rendimiento", "üîÆ Caso Pr√°ctico"].index(st.session_state["active_page"])
)
st.session_state["active_page"] = page

st.sidebar.markdown("---")
st.session_state["dark_mode"] = st.sidebar.toggle("üåô Modo oscuro", value=st.session_state["dark_mode"])

# === CSS din√°mico (light/dark) ===
if st.session_state["dark_mode"]:
    st.markdown("""
    <style>
    body { background-color: #121212; color: #f0f0f0; }
    .metric-card {
        background: #1e1e1e; padding: 1rem; border-radius: 10px;
        border-left: 5px solid #ec4899; margin: 0.5rem 0; color: #f0f0f0;
    }
    .success-box {
        background: #1b3c1b; padding: 1rem; border-radius: 10px;
        border: 1px solid #28a745; margin: 1rem 0; color: #d4edda;
    }
    .error-box {
        background: #3c1b1b; padding: 1rem; border-radius: 10px;
        border: 1px solid #f5c6cb; margin: 1rem 0; color: #f8d7da;
    }
    </style>
    """, unsafe_allow_html=True)
else:
    st.markdown("""
    <style>
    body { background-color: #ffffff; color: #111111; }
    .metric-card {
        background: #f9f9f9; padding: 1rem; border-radius: 10px;
        border-left: 5px solid #ec4899; margin: 0.5rem 0; color: #111111;
    }
    .success-box {
        background: #d4edda; padding: 1rem; border-radius: 10px;
        border: 1px solid #28a745; margin: 1rem 0; color: #111111;
    }
    .error-box {
        background: #f8d7da; padding: 1rem; border-radius: 10px;
        border: 1px solid #721c24; margin: 1rem 0; color: #111111;
    }
    </style>
    """, unsafe_allow_html=True)

# === Utilidades de API ===
@st.cache_data(ttl=600, show_spinner=False)
def get_model_info():
    try:
        r = requests.get(f"{API_URL}/model/info", timeout=8)
        return r.json() if r.ok else None
    except Exception:
        return None

@st.cache_data(ttl=600, show_spinner=False)
def get_examples():
    try:
        r = requests.get(f"{API_URL}/examples", timeout=8)
        return r.json() if r.ok else {}
    except Exception:
        return {}

def predict_single(payload: dict):
    try:
        r = requests.post(f"{API_URL}/predict", json=payload, timeout=12)
        return r.ok, r.json()
    except Exception as e:
        return False, {"error": str(e)}

def viz_url(name: str) -> str:
    # Para endpoints normales, usa API_URL
    base = API_URL

    # Si estamos sirviendo im√°genes, usar localhost (accesible desde el navegador)
    if "visualizations" in name or name.endswith(".png"):
        base = "http://localhost:5000"

    return f"{base}/visualizations/{name}"

# === Helper para im√°genes con tema ===
def themed_viz(name: str) -> str:
    theme = "dark" if st.session_state["dark_mode"] else "light"
    return viz_url(f"{name}_{theme}.png")

# === Helpers de UI ===
def feature_display_name(f: str) -> str:
    return FEATURE_TRANSLATIONS.get(f, f.replace("mean ", "").replace("_", " ").title())

def to_table_3x10(features: List[str]) -> pd.DataFrame:
    disp = [feature_display_name(f) for f in features]
    while len(disp) % 3 != 0:
        disp.append("")
    rows = len(disp) // 3
    data = {"Columna 1": disp[0:rows], "Columna 2": disp[rows:2*rows], "Columna 3": disp[2*rows:3*rows]}
    return pd.DataFrame(data)

def gauge_confidence(value_pct: float, benign: bool) -> go.Figure:
    if st.session_state["dark_mode"]:
        color = "#39FF14" if benign else "#FF1493"  # neon
    else:
        color = "#00cc96" if benign else "#ff6b6b"  # pastel
    fig = go.Figure(go.Indicator(
        mode="gauge+number",
        value=value_pct,
        title={'text': "Confianza (%)", 'font': {'size': 20}},
        gauge={'axis': {'range': [0, 100]}, 'bar': {'color': color, 'thickness': 0.3}}
    ))
    fig.update_layout(height=250, margin=dict(l=20, r=20, t=50, b=20))
    return fig

# === CONTEXTO + DATASET ===
if page == "üè† Contexto + EDA":
    # --- Solo el t√≠tulo en bloque destacado ---
    st.markdown("""
    <div class="metric-card" style="
        padding: 1.2em;
        border-radius: 12px;
        margin-bottom: 1.5em;
        border-left: 6px solid #e83e8c;
    ">
        <h1 style="margin: 0; font-size: 2em; color: inherit;">
            üè† Caso de Estudio: C√°ncer de Mama (Dataset WBCD)
        </h1>
    </div>
    """, unsafe_allow_html=True)

    # --- Texto narrativo normal (como Interpretaci√≥n) ---
    st.markdown("""
    üíó El **c√°ncer de mama** es una de las principales causas de morbilidad en mujeres a nivel mundial.  
    La **detecci√≥n temprana** aumenta considerablemente las probabilidades de un tratamiento exitoso y la posibilidad de salvar vidas.  
    """)

    # --- Bloque dataset ---
    info = get_model_info()
    if info:
        st.markdown("## üìä Sobre el Dataset")
        st.write("Utilizamos el **Wisconsin Breast Cancer (Diagnostic)** con un total de **569 muestras**:")

        c1, c2, c3 = st.columns(3)
        with c1:
            st.metric("Total de muestras", "569")
        with c2:
            st.metric("Benignos", "357")
        with c3:
            st.metric("Malignos", "212")

    # --- Tabla de variables agrupadas por tipo ---
    st.subheader("üìã Variables del dataset (agrupadas por tipo)")

    grouped_data = {
        "Promedios (mean)": [
            "Radio promedio", "Textura promedio", "Per√≠metro promedio", "√Årea promedio",
            "Suavidad promedio", "Compacidad promedio", "Concavidad promedio",
            "Puntos c√≥ncavos promedio", "Simetr√≠a promedio", "Dimensi√≥n fractal promedio"
        ],
        "Error est√°ndar (se)": [
            "Error en radio", "Error en textura", "Error en per√≠metro", "Error en √°rea",
            "Error en suavidad", "Error en compacidad", "Error en concavidad",
            "Error en puntos c√≥ncavos", "Error en simetr√≠a", "Error en dimensi√≥n fractal"
        ],
        "Peor caso (worst)": [
            "Radio peor caso", "Textura peor caso", "Per√≠metro peor caso", "√Årea peor caso",
            "Suavidad peor caso", "Compacidad peor caso", "Concavidad peor caso",
            "Puntos c√≥ncavos peor caso", "Simetr√≠a peor caso", "Dimensi√≥n fractal peor caso"
        ]
    }

    df_grouped = pd.DataFrame(grouped_data)
    st.dataframe(df_grouped, use_container_width=True, hide_index=True)

    st.markdown("""
    üìå **Interpretaci√≥n**  
    - Los valores **promedio (mean)** permiten caracterizar el comportamiento t√≠pico de cada c√©lula.  
    - Los valores de **error est√°ndar (se)** indican la variabilidad en la medici√≥n.  
    - Los valores de **peor caso (worst)** representan el escenario m√°s extremo observado en la muestra.  

    Esto facilita distinguir tumores malignos (m√°s irregulares, con mayor concavidad y √°rea) de los benignos (m√°s uniformes y suaves).
    """)

    # --- Mini EDA ---
    st.markdown("---")
    st.subheader("üî¨ Mini EDA (visi√≥n general)")
    col_a, col_b = st.columns(2)
    with col_a:
        st.markdown("**üîó Matriz de correlaci√≥n**")
        st.image(themed_viz("correlation_matrix"),
                 caption="Relaci√≥n entre variables (Pearson)",
                 use_column_width=True)
    with col_b:
        st.markdown("**üîë Top 10 variables m√°s relevantes**")
        st.image(themed_viz("feature_importance"),
                 caption="Importancia de caracter√≠sticas (Top 10)",
                 use_column_width=True)

    # --- Descargo en tarjeta ---
    st.markdown("""
    <div class="metric-card">
        <strong>‚ö†Ô∏è Descargo:</strong> Este proyecto es con fines <em>educativos</em>.  
        No constituye diagn√≥stico m√©dico ni reemplaza la evaluaci√≥n de un profesional de la salud.
    </div>
    """, unsafe_allow_html=True)

# 2) MODELO Y RENDIMIENTO
elif page == "‚öôÔ∏è Modelo y Rendimiento":
    st.title("‚öôÔ∏è Modelo y Rendimiento")
    st.markdown("""
    ü§ñ **Algoritmo:** Random Forest.  
    üéØ **Objetivo:** clasificar tumores en **benignos** o **malignos**.
    """)

    info = get_model_info()
    if info and "metrics" in info:
        m = info["metrics"]
        c1, c2, c3 = st.columns(3)
        with c1:
            st.metric("Accuracy (test)", f"{m.get('accuracy', 0): .2%}")
        with c2:
            st.metric("F1-Score", f"{m.get('f1_score', 0): .2%}")
        with c3:
            st.metric("ROC-AUC", f"{m.get('roc_auc', 0): .3f}")

        st.markdown("---")
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**üìä Matriz de Confusi√≥n**")
            st.image(themed_viz("confusion_matrix"), use_column_width=True)
        with col2:
            st.markdown("**üìà Curva ROC**")
            st.image(themed_viz("roc_curve"), use_column_width=True)

        # --- Bloque de interpretaci√≥n (adaptado a light/dark) ---
        st.markdown("""
        <div class="metric-card">
            <strong>üìù Interpretaci√≥n de Resultados</strong><br><br>
            El modelo entrenado logra distinguir con gran precisi√≥n entre <b>tumores benignos</b> y <b>malignos</b>:<br><br>
            üîπ <b>39 casos</b> fueron clasificados correctamente como <b>benignos</b> (verdaderos positivos).<br>
            üîπ <b>69 casos</b> fueron clasificados correctamente como <b>malignos</b> (verdaderos negativos).<br>
            üîπ Solo se observaron <b>6 errores en total</b> (3 benignos predichos como malignos y 3 malignos predichos como benignos).<br><br>
            üìä La <b>Curva ROC</b> confirma este rendimiento: el √°rea bajo la curva (<b>AUC = 0.994</b>) refleja una capacidad predictiva sobresaliente, cercana al 100%.<br><br>
            ‚úÖ En conclusi√≥n, el modelo es altamente confiable para identificar casos de c√°ncer de mama, aunque ‚Äîcomo todo modelo‚Äî no est√° exento de un peque√±o margen de error.
        </div>
        """, unsafe_allow_html=True)


# 3) CASO PR√ÅCTICO
elif page == "üîÆ Caso Pr√°ctico":
    st.title("üîÆ Caso Pr√°ctico de An√°lisis")

    examples = get_examples()
    col_p1, col_p2 = st.columns(2)
    if col_p1.button("üü¢ Cargar ejemplo Benigno"):
        st.session_state["inputs"] = examples.get("benign_case", {})
    if col_p2.button("üî¥ Cargar ejemplo Maligno"):
        st.session_state["inputs"] = examples.get("malignant_case", {})

    st.markdown("---")
    st.subheader("üéõÔ∏è Ajusta manualmente las variables")
    info = get_model_info()
    if info:
        features = info.get("features", [])
        with st.form("form_prediccion"):
            cols = st.columns(3)
            inputs = {}
            for i, f in enumerate(features):
                label = feature_display_name(f)
                default_val = float(st.session_state["inputs"].get(f, 10.0))
                col = cols[i % 3]
                with col:
                    inputs[f] = st.slider(label, min_value=0.0, max_value=30.0,
                                          value=default_val, step=0.1, key=f"slider_{f}")

            submitted = st.form_submit_button("üîç Predecir")
            if submitted:
                st.session_state["inputs"] = inputs
                ok, result = predict_single(inputs)
                st.markdown("---")
                st.subheader("üìã Resultado")

                if not ok:
                    st.error(f"Error en la predicci√≥n: {result.get('error', 'desconocido')}")
                else:
                    pred = result.get("prediction", 0)
                    proba = result.get("probability", [0, 0])
                    conf_pct = max(proba) * 100 if proba else 0.0

                    if pred == 0:
                        st.markdown('<div class="success-box"><h3>‚úÖ Tumor Benigno</h3></div>', unsafe_allow_html=True)
                        st.plotly_chart(gauge_confidence(conf_pct, benign=True), use_container_width=True)
                    else:
                        st.markdown('<div class="error-box"><h3>‚ö†Ô∏è Tumor Maligno</h3></div>', unsafe_allow_html=True)
                        st.plotly_chart(gauge_confidence(conf_pct, benign=False), use_container_width=True)

                    # Barra comparativa de probabilidades
                    try:
                        p0 = float(proba[0]) * 100
                        p1 = float(proba[1]) * 100
                        if st.session_state["dark_mode"]:
                            bar_colors = ['#39FF14', '#FF1493']  # neon
                        else:
                            bar_colors = ['#51cf66', '#ff6b6b']  # pastel
                        bar = go.Figure(go.Bar(x=["Benigno", "Maligno"], y=[p0, p1],
                                               marker_color=bar_colors))
                        bar.update_layout(height=260, margin=dict(l=20, r=20, t=30, b=40),
                                          yaxis_title="Probabilidad (%)")
                        st.plotly_chart(bar, use_container_width=True)
                    except Exception:
                        pass

    st.markdown("---")
    st.markdown("""
    <div class="metric-card">
        <strong>‚ö†Ô∏è Nota:</strong> Esta predicci√≥n es educativa. 
        Para cualquier caso real, consulta siempre a un profesional m√©dico.
    </div>
    """, unsafe_allow_html=True)

# === Footer ===
st.markdown("---")
f1, f2, f3 = st.columns(3)
with f1: st.caption("üìä Dataset: Wisconsin Breast Cancer (UCI)")
with f2: st.caption("ü§ñ Modelo: Random Forest")
with f3: st.caption("üéÄ Proyecto educativo de apoyo")