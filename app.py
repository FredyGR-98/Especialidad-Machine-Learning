"""
===========================================================
üìå app.py ‚Äî API para servir el modelo de predicci√≥n
===========================================================

Este archivo implementa una API usando Flask, la cual permite
realizar predicciones con el modelo previamente entrenado
y guardado en 'model.joblib'.

‚öôÔ∏è Flujo general:
1. Se carga el modelo entrenado desde el archivo 'model.joblib'.
2. Se define un endpoint ra√≠z `/` que retorna la interfaz HTML
   con sliders interactivos para ingresar caracter√≠sticas.
3. Se define un endpoint `/predict` que recibe datos en formato JSON.
4. Se validan los datos de entrada y se procesan con el modelo.
5. Se retorna la predicci√≥n correspondiente (benigno/maligno) en JSON.

‚úÖ Importancia:
Sin este archivo, el modelo no podr√≠a ‚Äúexponerse‚Äù al exterior.
Gracias a esta API, aplicaciones o usuarios externos pueden
enviar informaci√≥n y recibir respuestas autom√°ticas del modelo.

üéØ Justificaci√≥n de dise√±o:
- Se incluy√≥ **validaci√≥n de entrada** para asegurar que los datos
  enviados contengan el campo "features" y evitar fallos silenciosos.
- Se a√±adi√≥ **manejo de errores y logging** para mejorar la trazabilidad
  y depuraci√≥n durante el desarrollo y despliegue.
- Se integr√≥ un **frontend en HTML** con sliders din√°micos para
  facilitar la interacci√≥n con el modelo de forma visual y pr√°ctica,
  lo que mejora la experiencia del usuario y hace m√°s did√°ctico
  comprender c√≥mo cambian las predicciones.
"""
# ==========================
# üìö Importaci√≥n de librer√≠as
# ==========================
from flask import Flask, request, render_template, jsonify
import numpy as np
import joblib
import logging

# ==========================
# üìù Configuraci√≥n de logging
# ==========================
# Solo en consola, con formato m√°s legible
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s",
    datefmt="%H:%M:%S"
)

# ==========================
# üöÄ Inicializaci√≥n de la aplicaci√≥n Flask
# ==========================
# Indicamos que las plantillas HTML estar√°n en la carpeta "templates"
app = Flask(__name__, template_folder="templates")

# ==========================
# üì¶ Carga del modelo entrenado
# ==========================
# Se carga el modelo previamente serializado con joblib.
# Esto evita reentrenar el modelo cada vez que iniciamos la API.
model = joblib.load("model.joblib")

# Diccionario que traduce las clases num√©ricas a nombres m√°s claros
CLASSES = {0: "malignant", 1: "benign"}


# ==========================
# üåê Ruta principal (GET /)
# ==========================
@app.route("/", methods=["GET"])
def home():
    """
    P√°gina principal:
    Renderiza la interfaz `index.html` ubicada en la carpeta /templates.
    Aqu√≠ es donde se despliega la interfaz gr√°fica del usuario.
    """
    return render_template("index.html")


# ==========================
# üîÆ Ruta de predicci√≥n (POST /predict)
# ==========================
@app.route("/predict", methods=["POST"])
def predict():
    """
    Endpoint de predicci√≥n:
    - Recibe datos desde la interfaz o un cliente externo en formato JSON.
    - Valida que los datos sean correctos.
    - Ejecuta el modelo para generar la predicci√≥n.
    - Retorna la clase predicha en formato JSON.

    Ejemplo de entrada JSON:
    {
        "features": [13.0, 20.0, 80.0, 500.0, ..., 0.25, 0.07]
    }
    """
    try:
        # 1Ô∏è‚É£ Verificamos que se haya recibido un JSON v√°lido
        data = request.json
        if not data or "features" not in data:
            return jsonify({"error": "‚ö†Ô∏è No se recibieron datos v√°lidos"}), 400

        # 2Ô∏è‚É£ Convertimos los datos en un array de NumPy
        input_array = np.array(data["features"]).reshape(1, -1)

        # 3Ô∏è‚É£ Realizamos la predicci√≥n con el modelo cargado
        prediction = model.predict(input_array)[0]

        # 4Ô∏è‚É£ Obtenemos el nombre de la clase (benigno / maligno)
        class_name = CLASSES.get(int(prediction), "unknown")

        # 5Ô∏è‚É£ Retornamos el resultado en formato JSON
        return jsonify({
            "prediction": int(prediction),
            "class_name": class_name
        })

    except Exception as e:
        # ‚ö†Ô∏è Manejo de errores: en caso de fallar, devolvemos el error
        return jsonify({"error": str(e)}), 500


# ==========================
# ‚ñ∂Ô∏è Ejecuci√≥n de la aplicaci√≥n
# ==========================
if __name__ == "__main__":
    # El host 0.0.0.0 permite que la API sea accesible en red local.
    # El modo debug=True facilita detectar errores durante desarrollo.
    app.run(host="0.0.0.0", port=5000, debug=True)